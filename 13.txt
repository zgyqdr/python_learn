前情回顾

1. 多任务编程

   多任务 ：  一个计算机能同时做多件事

   cpu机制 ： 轮询机制  多核cpu   并发和并行

   多任务编程 ：  一个程序可以同时启动多个任务

2. 进程

   一个执行过程  占有系统的运行资源

   PID  进程状态  父子进程  孤儿进程  僵尸进程

   ps -aux   pstree

3. multiprocessing

   p = Process()
   p.start()
   p.join()

   p.pid  p.name  p.daemon

   os.getpid()  os.getppid()  sys.exit()

4. 自定义进程类


练习1 ：  使用进程池完成
拷贝一个指定的目录 （文件夹中全是普通文件没有子文件夹）

思路 ： 1. 什么事情作为进程池事件  （拷贝文件）
       2. 拷贝文件函数  找共性封装  特性传参

       os.listdir()
       os.mkdir("xxx")

练习2 ： 在练习1的基础上完成
拷贝的过程中不断的显示拷贝的百分比

百分比 = 已经拷贝的大小 / 总大小 × 100  %

总大小 = 文件夹中所有文件大小之和
os.path.getsize()

群聊聊天室

需求分析

* 有人进入聊天室需要输入姓名，姓名不能重复
* 有人进入聊天室时，其他人会收到通知：xxx 进入了聊天室
* 一个人发消息，其他人会收到：xxx ： xxxxxxxxxxx
* 有人退出聊天室，则其他人也会收到通知:xxx退出了聊天室

技术分析  c/s

存储人员信息： 服务端
   存什么 ： 名字  地址
   怎么存 ： {name:address}
            [(name,address),...]
            class Person:
                def __init__(self,name,address):
                   self.name = name
                   self.address = address

消息的网络传递 : udp
    消息发送：转发的方法   客户端-》服务端-》客户端
    收发消息: 多进程，一个负责发送，一个负责接收


功能模块划分 封装方法 ： 函数封装

    框架模型

    进入聊天室

    聊天

    退出聊天室


网络协议设置

           请求类型     数据参量
    进入     LOGIN      name

    聊天     CHAT    name   说话的内容

    退出     EXIT




功能模块逻辑具体分析

    框架模型
        服务端 ： 1. 创建udp网络服务端
                 2. 循环接收各种客户端请求
                 3. 根据请求做出调用

        客户端 ： 1. 创建udp网络

    进入聊天室
        客户端 ： 1. 输入姓名
                 2. 发送给服务端
                 3. 接收服务端反馈
                 4. Y 进入聊天 N 回到第一步

        服务端 ： 1. 接收请求
                 2. 判断是否有这个姓名
                 3. 根据判断发送结果
                     Y -》存储用户 告知其他人
                     N -》over

    聊天
       客户端 ：1. 创建子进程
               2. 父进程循环发送消息
                  子进程循环接收消息

       服务端 ： 1. 接收请求
                2. 将消息转发给其他人


    退出聊天室

优化完善


作业 ： 1. 完成聊天室的聊天室功能









